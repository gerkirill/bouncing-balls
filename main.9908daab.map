{"version":3,"sources":["js/modules/random.js","js/modules/ball.js","js/main.js"],"names":["random","min","max","exp","num","undefined","Math","floor","Ball","x","y","velX","velY","color","size","context","beginPath","fillStyle","arc","PI","fill","screenSize","width","height","balls","j","length","dx","dy","distance","sqrt","canvas","document","querySelector","ctx","getContext","window","innerWidth","innerHeight","addEventListener","loop","fillRect","ball","push","i","draw","update","collisionDetect","requestAnimationFrame"],"mappings":"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","file":"main.9908daab.map","sourceRoot":"..","sourcesContent":["// function to generate random number\nexport function random(min, max, exp) {\n  let num;\n  if (exp !== undefined) {\n    do {\n      num = Math.floor(Math.random() * (max - min)) + min;\n    }\n    while (num === 0);\n  } else {\n    num = Math.floor(Math.random() * (max - min)) + min;\n  }\n  return num;\n}\n","// import of modules\nimport { random } from './random';\n\n// define Ball constructor\nexport class Ball {\n  constructor(x, y, velX, velY, color, size) {\n    this.x = x;\n    this.y = y;\n    this.velX = velX;\n    this.velY = velY;\n    this.color = color;\n    this.size = size;\n  }\n\n  // define ball draw method\n  draw(context) {\n    context.beginPath();\n    context.fillStyle = this.color;\n    context.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n    context.fill();\n  }\n\n  // define ball update method\n  update(screenSize) {\n    if ((this.x + this.size) >= screenSize.width) {\n      this.velX = -(this.velX);\n    }\n\n    if ((this.x - this.size) <= 0) {\n      this.velX = -(this.velX);\n    }\n\n    if ((this.y + this.size) >= screenSize.height) {\n      this.velY = -(this.velY);\n    }\n\n    if ((this.y - this.size) <= 0) {\n      this.velY = -(this.velY);\n    }\n\n    this.x += this.velX;\n    this.y += this.velY;\n  }\n\n  // define ball collision detection\n  collisionDetect(balls) {\n    for (let j = 0; j < balls.length; j++) {\n      if (!(this === balls[j])) {\n        const dx = this.x - balls[j].x;\n        const dy = this.y - balls[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < this.size + balls[j].size) {\n          balls[j].color = this.color = `rgb(${random(0, 255)}, ${random(0, 255)}, ${random(0, 255)})`;\n        }\n      }\n    }\n  }\n}\n","// import of modules\nimport { random } from './modules/random';\nimport { Ball } from './modules/ball';\n\n// setup canvas\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\n\nlet width = canvas.width = window.innerWidth;\nlet height = canvas.height = window.innerHeight;\nconst screenSize = { width, height };\n\nwindow.addEventListener('resize', () => {\n  width = canvas.width = screenSize.width = window.innerWidth;\n  height = canvas.height = screenSize.height = window.innerHeight;\n});\n\n// define array to store balls\n\nconst balls = [];\n\n// define loop that keeps drawing the scene constantly\n\nfunction loop() {\n  ctx.fillStyle = 'rgba(0,0,0,1)';\n  ctx.fillRect(0, 0, width, height);\n\n  while (balls.length < 25) {\n    const ball = new Ball(\n      random(20, width - 20),\n      random(20, height - 20),\n      random(-7, 7, 0),\n      random(-7, 7, 0),\n      `rgb(${random(0, 255)},${random(0, 255)},${random(0, 255)})`,\n      random(10, 20)\n    );\n    balls.push(ball);\n  }\n\n  for (let i = 0; i < balls.length; i++) {\n    balls[i].draw(ctx);\n    balls[i].update(screenSize);\n    balls[i].collisionDetect(balls);\n  }\n\n  requestAnimationFrame(loop);\n}\n\n\nloop();\n"]}