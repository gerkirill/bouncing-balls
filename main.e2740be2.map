{"version":3,"sources":["js/modules/random.js","js/modules/ball.js","js/main.js"],"names":["random","min","max","num","Math","floor","Ball","x","y","velX","velY","color","size","context","beginPath","fillStyle","arc","PI","fill","screenSize","width","height","ballsArr","j","length","dx","dy","distance","sqrt","canvas","document","querySelector","ctx","getContext","window","innerWidth","innerHeight","addEventListener","balls","loop","fillRect","ball","push","i","draw","update","collisionDetect","requestAnimationFrame"],"mappings":"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","file":"main.e2740be2.map","sourceRoot":"..","sourcesContent":["// function to generate random number\nexport function random(min, max) {\n  const num = Math.floor(Math.random() * (max - min)) + min;\n  return num;\n}\n","// import of modules\nimport { random } from './random';\n\n// define Ball constructor\nexport class Ball {\n  constructor(x, y, velX, velY, color, size) {\n    this.x = x;\n    this.y = y;\n    this.velX = velX;\n    this.velY = velY;\n    this.color = color;\n    this.size = size;\n  }\n\n  // define ball draw method\n  draw(context) {\n    context.beginPath();\n    context.fillStyle = this.color;\n    context.arc(this.x, this.y, this.size, 0, 2 * Math.PI);\n    context.fill();\n  }\n\n  // define ball update method\n  update(screenSize) {\n    if ((this.x + this.size) >= screenSize.width) {\n      this.velX = -(this.velX);\n    }\n\n    if ((this.x - this.size) <= 0) {\n      this.velX = -(this.velX);\n    }\n\n    if ((this.y + this.size) >= screenSize.height) {\n      this.velY = -(this.velY);\n    }\n\n    if ((this.y - this.size) <= 0) {\n      this.velY = -(this.velY);\n    }\n\n    this.x += this.velX;\n    this.y += this.velY;\n  }\n\n  // define ball collision detection\n  collisionDetect(ballsArr) {\n    for (let j = 0; j < ballsArr.length; j++) {\n      if (!(this === ballsArr[j])) {\n        const dx = this.x - ballsArr[j].x;\n        const dy = this.y - ballsArr[j].y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n\n        if (distance < this.size + ballsArr[j].size) {\n          ballsArr[j].color = this.color = `rgb(${random(0, 255)},${random(0, 255)},${random(0, 255)})`;\n        }\n      }\n    }\n  }\n}\n","// import of modules\nimport { random } from './modules/random';\nimport { Ball } from './modules/ball';\n\n// setup canvas\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\n\nlet width = canvas.width = window.innerWidth;\nlet height = canvas.height = window.innerHeight;\nconst screenSize = { width, height };\n\nwindow.addEventListener('resize', () => {\n  width = canvas.width = screenSize.width = window.innerWidth;\n  height = canvas.height = screenSize.height = window.innerHeight;\n});\n\n// define array to store balls\n\nconst balls = [];\n\n// define loop that keeps drawing the scene constantly\n\nfunction loop() {\n  ctx.fillStyle = 'rgba(0,0,0,1)';\n  ctx.fillRect(0, 0, width, height);\n\n  while (balls.length < 25) {\n    const ball = new Ball(\n      random(0, width),\n      random(0, height),\n      random(-7, 7),\n      random(-7, 7),\n      `rgb(${random(0, 255)},${random(0, 255)},${random(0, 255)})`,\n      random(10, 20)\n    );\n    balls.push(ball);\n  }\n\n  for (let i = 0; i < balls.length; i++) {\n    balls[i].draw(ctx);\n    balls[i].update(screenSize);\n    balls[i].collisionDetect(balls);\n  }\n\n  requestAnimationFrame(loop);\n}\n\n\nloop();\n"]}